<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烟柳画桥&amp;晚来风急</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-17T10:52:16.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>烟柳画桥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网易云音乐评论</title>
    <link href="http://yoursite.com/2018/10/18/%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%84%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/10/18/网易云评论/</id>
    <published>2018-10-18T02:02:00.000Z</published>
    <updated>2018-10-17T10:52:16.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过坑获得了成功。用到的知识主要有-requestes-beautifulsoup-PyCryptodome等。"><a href="#想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过坑获得了成功。用到的知识主要有-requestes-beautifulsoup-PyCryptodome等。" class="headerlink" title="想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过坑获得了成功。用到的知识主要有:requestes,beautifulsoup,PyCryptodome等。"></a>想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过坑获得了成功。用到的知识主要有:requestes,beautifulsoup,PyCryptodome等。</h2><p>首先我们随机点开一首歌，用requests.get()获取其源码，结果我们发现好多信息是经过加密的，我们不能提取到有效的信息，贴个代码演示一下。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/song?id=<span class="token variable">${x.id}</span>"</span><span class="token operator">></span><span class="token operator">&lt;</span>b title<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.name|escape}</span>{if alia} - (<span class="token variable">${alia|escape}</span>){/if}"</span><span class="token operator">></span><span class="token variable">${soil(x.name)}</span><span class="token operator">&lt;</span>/b<span class="token operator">></span><span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token punctuation">{</span>if alia<span class="token punctuation">}</span><span class="token operator">&lt;</span>span title<span class="token operator">=</span><span class="token string">"<span class="token variable">${alia|escape}</span>"</span> class<span class="token operator">=</span><span class="token string">"s-fc8"</span><span class="token operator">></span> - <span class="token punctuation">(</span><span class="token variable">${soil(alia)}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token punctuation">{</span>/if<span class="token punctuation">}</span><span class="token punctuation">{</span>if x.mvid<span class="token operator">></span>0<span class="token punctuation">}</span><span class="token operator">&lt;</span>span data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span> data-res-action<span class="token operator">=</span><span class="token string">"mv"</span> title<span class="token operator">=</span><span class="token string">"播放mv"</span> class<span class="token operator">=</span><span class="token string">"mv"</span><span class="token operator">></span>MV<span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token punctuation">{</span>/if<span class="token punctuation">}</span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"opt hshow"</span><span class="token operator">></span><span class="token operator">&lt;</span>a class<span class="token operator">=</span><span class="token string">"u-icn u-icn-81 icn-add"</span> href<span class="token operator">=</span><span class="token string">"javascript:;"</span> title<span class="token operator">=</span><span class="token string">"添加到播放列表"</span> hidefocus<span class="token operator">=</span><span class="token string">"true"</span>data-res-type<span class="token operator">=</span><span class="token string">"18"</span>data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span>data-res-action<span class="token operator">=</span><span class="token string">"addto"</span><span class="token punctuation">{</span>if from<span class="token punctuation">}</span>data-res-from<span class="token operator">=</span><span class="token string">"<span class="token variable">${from.fid}</span>"</span> data-res-data<span class="token operator">=</span><span class="token string">"<span class="token variable">${from.fdata}</span>"</span><span class="token punctuation">{</span>/if<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>span data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span> data-res-type<span class="token operator">=</span><span class="token string">"18"</span> data-res-action<span class="token operator">=</span><span class="token string">"fav"</span> class<span class="token operator">=</span><span class="token string">"icn icn-fav"</span> title<span class="token operator">=</span><span class="token string">"收藏"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>span data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span> data-res-type<span class="token operator">=</span><span class="token string">"18"</span> data-res-action<span class="token operator">=</span><span class="token string">"share"</span> data-res-name<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.name}</span>"</span> data-res-author<span class="token operator">=</span><span class="token string">"{list x.artists as art}<span class="token variable">${art.name}</span>{if art_index&lt;x.artists.length-1}/{/if}{/list}"</span> <span class="token punctuation">{</span>if x.album<span class="token punctuation">}</span>data-res-pic<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.album.picUrl}</span>"</span><span class="token punctuation">{</span>/if<span class="token punctuation">}</span> class<span class="token operator">=</span><span class="token string">"icn icn-share"</span> title<span class="token operator">=</span><span class="token string">"分享"</span><span class="token operator">></span>分享<span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>span data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span> data-res-type<span class="token operator">=</span><span class="token string">"18"</span> data-res-action<span class="token operator">=</span><span class="token string">"download"</span> class<span class="token operator">=</span><span class="token string">"icn icn-dl"</span> title<span class="token operator">=</span><span class="token string">"下载"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token punctuation">{</span>if canDel<span class="token punctuation">}</span><span class="token operator">&lt;</span>span data-res-id<span class="token operator">=</span><span class="token string">"<span class="token variable">${x.id}</span>"</span> data-res-type<span class="token operator">=</span><span class="token string">"18"</span> data-res-action<span class="token operator">=</span><span class="token string">"delete"</span> class<span class="token operator">=</span><span class="token string">"icn icn-del"</span> title<span class="token operator">=</span><span class="token string">"删除"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token punctuation">{</span>/if<span class="token punctuation">}</span></code></pre><p>我们可以清楚的看到，我们需要提取的信息都被加密过。无法通过普通的办法获得我们想要的内容。<br>这时我们有两种思路：<br>1：使用selenium模拟浏览器的操作进行爬取。此方法我们不在这篇文章里讲述，想尝试的同学可以自己尝试。<br>2：鉴于该数据采取ajax，我们通过访问该网址获取其json字符串，直接完成其信息的采集。我们先按思路二进行下去。</p><p>首先在加载的一堆数据中排查得到我们需要的网址，如下：</p><pre class=" language-bash"><code class="language-bash">Request URL: https://music.163.com/weapi/v1/resource/comments/R_SO_4_531295576?csrf_token<span class="token operator">=</span>Request Method: POSTStatus Code: 200 OKRemote Address: 127.0.0.1:1080Referrer Policy: no-referrer-when-downgradeAccept: */*Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Connection: keep-aliveContent-Length: 482Content-Type: application/x-www-form-urlencodedCookie: 过长就不贴了。Host: music.163.comOrigin: https://music.163.comReferer: https://music.163.com/song?id<span class="token operator">=</span>531295576User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/68.0.3440.106 Safari/537.36Form Ddta:    params: +0YydG970lh0RFa4CtT3YQEDyAB+YtGNJ+UbomdqEnY+TemTKHVbA3vJIX3NKgm07UOy+J2sKcSTM0smfpKbOA4Dm8TJcxbWZrVnjeVl/zE3z3PX21iD84D5Qt50oLrZv8Gug+LqS/y1JWBWiq6DZ0ZaZZEG8aYRYF2bwnPxX9v55DxZJmiubjteCc5lMs0S    encSecKey: 762617ad7682a61121e378406d57ffd5aede0f3621e18d1584dab1eca7fdf3ca3d842d882111609a4ada5d3c24973450d1a8553ff96641f144a6de81688ae2c0a5798f8c23fa38e16139999692b6c91150b39c25c014ee6a2005e821485c3a6eab822db16f0397be0c54e43993cc34eae70c68739d19d0eb69e7ca86b16b585a</code></pre><p>我们可以看出他是一个post请求，通过多次测试我们发现网址中那个数字会有变化。其他则保持不变，这串数字也很简单的可以发现就是这首歌在网易云的id，我们需要先爬取这个id之后才能进行下一步的操作(以热歌榜为例）。上代码说话。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">from</span> requests <span class="token keyword">import</span> ConnectionError<span class="token keyword">from</span> requests <span class="token keyword">import</span> Timeoutheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">get_index</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf8'</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">except</span> Timeout <span class="token keyword">as</span> t<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_url</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    hot_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;ul class="f-hide">&lt;li>&lt;a href="/song\?id=\d*?">.*&lt;/a>&lt;/li>&lt;/ul>'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    hot_list <span class="token operator">=</span> hot_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    hot_music_id <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;li>&lt;a href="/song\?id=(\d*?)">.*?&lt;/a>&lt;/li>'</span><span class="token punctuation">,</span>hot_list<span class="token punctuation">)</span>    hot_music_name <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;li>&lt;a href="/song\?id=\d*?">(.*?)&lt;/a>&lt;/li>'</span><span class="token punctuation">,</span>hot_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> hot_music_name<span class="token punctuation">,</span>hot_music_id<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://music.163.com/discover/toplist?id=3778678"</span>    html <span class="token operator">=</span> get_index<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> html<span class="token punctuation">:</span>        hot_music_name<span class="token punctuation">,</span>hot_music_id <span class="token operator">=</span> parse_url<span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>我用正则表达式提取出其id和名字，既然id到了那么下面应该很简单的吧。答案是这样吗？我们继续看：</p><hr><p>请求数据里有两个参数，params 和 encSecKey。如果我们只爬取该歌曲的第一页评论（或者说热评）的话，那么我们只要把这两个参数复制然后构造post请求，可以简单的做到这一点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"params"</span><span class="token punctuation">:</span> <span class="token string">"dPn4YKam1ALLghjJadhyim4G05a1atAbF7ECvh5EGXihbxOV1i+TRS2oNZv+jR8H6nZ0DSoff6PQQ9mEnocZIv8D5ispn9aLDlta+vylq2wUnJQYLR0KkoQFYcXQ+VOvbmJyLK1acsZ/GuCkP+XFbr3h9WtEAXu3sxfn0DKFO06eNMufFrUHTmw7zyVFp64zYAHK4jIvkSTAkkVYqMu2IbwYG4coJ6wScE1DwKyRQlE="</span><span class="token punctuation">,</span>        <span class="token string">"encSecKey"</span><span class="token punctuation">:</span> <span class="token string">"ca034db233499f555cd0009cf367f35093381ded33765fb6026c09c333a20b41d87bcd71504fc87159d55f6b2308343b0d443b8c68c575c1b6e6c37c98fdb571e4a0f61beb292ba4847840ba52f4d0f1c3169e3a2492c00a2cc7b4664a5eb63c6c06be9d90b9a0dc0c305aa8204820225ab5aeace9c2d4ee0dd628a5a022cdba"</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> BASE_URL <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"?csrf_token="</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_parse</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'hotComments'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"Comments"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"Comments"</span><span class="token punctuation">)</span>    file_path <span class="token operator">=</span> <span class="token string">"{}/Hot.txt"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Comments"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> contents <span class="token keyword">in</span> data<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span> contents<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"***************************************************"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></code></pre><p>但是我们仅仅满足于热评吗？？？网易云的情圣们可能还隐藏在里面，那么我们继续采坑吧。<br>我们点击评论的下一页，通过开发者工具我们可以发现网址丝毫不变，其他也基本不变，那么我们的数据是怎么改变的呢，post传输的数据为罪魁祸首，那么这些post数据是怎么变化的呢，通过不断地寻找我们锁定了一个js脚本，我们发现这串数据来自于它，并且是加密过的（好难受），加密函数如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> a<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var d, e, b <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>, c <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> 0<span class="token punctuation">;</span> a <span class="token operator">></span> d<span class="token punctuation">;</span> d +<span class="token operator">=</span> 1<span class="token punctuation">)</span>            e <span class="token operator">=</span> Math.random<span class="token punctuation">(</span><span class="token punctuation">)</span> * b.length,            e <span class="token operator">=</span> Math.floor<span class="token punctuation">(</span>e<span class="token punctuation">)</span>,            c +<span class="token operator">=</span> b.charAt<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c    <span class="token punctuation">}</span>    <span class="token keyword">function</span> b<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var c <span class="token operator">=</span> CryptoJS.enc.Utf8.parse<span class="token punctuation">(</span>b<span class="token punctuation">)</span>          , d <span class="token operator">=</span> CryptoJS.enc.Utf8.parse<span class="token punctuation">(</span><span class="token string">"0102030405060708"</span><span class="token punctuation">)</span>          , e <span class="token operator">=</span> CryptoJS.enc.Utf8.parse<span class="token punctuation">(</span>a<span class="token punctuation">)</span>          , f <span class="token operator">=</span> CryptoJS.AES.encrypt<span class="token punctuation">(</span>e, c, <span class="token punctuation">{</span>            iv: d,            mode: CryptoJS.mode.CBC        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> c<span class="token punctuation">(</span>a, b, c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var d, e<span class="token punctuation">;</span>        <span class="token keyword">return</span> setMaxDigits<span class="token punctuation">(</span>131<span class="token punctuation">)</span>,        d <span class="token operator">=</span> new RSAKeyPair<span class="token punctuation">(</span>b,<span class="token string">""</span>,c<span class="token punctuation">)</span>,        e <span class="token operator">=</span> encryptedString<span class="token punctuation">(</span>d, a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> d<span class="token punctuation">(</span>d, e, f, g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var h <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          , i <span class="token operator">=</span> a<span class="token punctuation">(</span>16<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>d, g<span class="token punctuation">)</span>,        h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>h.encText, i<span class="token punctuation">)</span>,        h.encSecKey <span class="token operator">=</span> c<span class="token punctuation">(</span>i, e, f<span class="token punctuation">)</span>,        h    <span class="token punctuation">}</span>    <span class="token keyword">function</span> e<span class="token punctuation">(</span>a, b, d, e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f.encText <span class="token operator">=</span> c<span class="token punctuation">(</span>a + e, b, d<span class="token punctuation">)</span>,        f    <span class="token punctuation">}</span>    window.asrsea <span class="token operator">=</span> d,    window.ecnonasr <span class="token operator">=</span> e<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window.asrsea函数就是那个加密的罪魁祸首。也就是上面的d函数.</code></pre><p>可以看出它采用CryptoJS加密,我们可以通过PyCryptodome(python3用户），如果你是python2的话，请安装这个pycrypto，pycrypto已经宣布永久停止维护了，所以请移步PyCryptodome吧，<a href="https://github.com/Legrandin/pycryptodome" title="PyCryptodome的github地址" target="_blank" rel="noopener">https://github.com/Legrandin/pycryptodome</a>。</p><hr><p>那么我们是如何发现这个函数的呢，Chrome开发者控制面板–source–点击 Event Listener Breakpoints–勾选XHR–点击重新加载–然后点击 Step over next function call的那个图标，就这样单步调试过去，就能找到那个函数。。然后我们打开Chrome的调试工具，把断点设在12973行我们可以发现上面的参数（格式化js语句点击下面出现的{}标志即可），既然找到了加密函数和相应的参数，那么我们开始用py模仿破解吧，经过多次翻页我们发现只有<br>{rid: “R_SO_4_574566207”, offset: “40”, total: “false”, limit: “20”, csrf_token: “”}<br>{rid: “R_SO_4_574566207”, offset: “60”, total: “false”, limit: “20”, csrf_token: “”}<br>可以看出只有offset参数是变化的，limit参数经过分析是控制每页评论数的，限制每页20条，其他则是固定不变的，结合上面的window.asrsea()函数，我们构造出加密字符串，完成post请求进而得到我们的评论数据。</p><p>回到我们的加密函数上，我们发现它经过AES加密和RSA加密。</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> d<span class="token punctuation">(</span>d, e, f, g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var h <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          , i <span class="token operator">=</span> a<span class="token punctuation">(</span>16<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>d, g<span class="token punctuation">)</span>, <span class="token comment" spellcheck="true">#AES加密</span>        h.encText <span class="token operator">=</span> b<span class="token punctuation">(</span>h.encText, i<span class="token punctuation">)</span>, <span class="token comment" spellcheck="true">#AES加密</span>        h.encSecKey <span class="token operator">=</span> c<span class="token punctuation">(</span>i, e, f<span class="token punctuation">)</span>, <span class="token comment" spellcheck="true">#RSA加密</span>        h    <span class="token punctuation">}</span></code></pre><p>不懂这些加密函数什么意思，自学啊，还是先模仿吧。用到我们上面写到的PyCryptodome库，进行Crypto加密。我还是贴代码吧。。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入这些第三方库</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> math<span class="token keyword">import</span> random<span class="token keyword">import</span> base64<span class="token keyword">import</span> codecs<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES</code></pre><p>首先我们需要生成长度为16的随机字符串,这里我们仿照上面的javascript的实现,用Python生成16位长的随机字符串:</p><pre class=" language-bash"><code class="language-bash">def generate_random_strs<span class="token punctuation">(</span>length<span class="token punctuation">)</span>:    string <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>    <span class="token comment" spellcheck="true"># 控制次数参数i</span>    i <span class="token operator">=</span> 0    <span class="token comment" spellcheck="true"># 初始化随机字符串</span>    random_strs  <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length:        e <span class="token operator">=</span> random.random<span class="token punctuation">(</span><span class="token punctuation">)</span> * len<span class="token punctuation">(</span>string<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 向下取整</span>        e <span class="token operator">=</span> math.floor<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        random_strs <span class="token operator">=</span> random_strs + list<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span>        i <span class="token operator">=</span> i + 1    <span class="token keyword">return</span> random_strs</code></pre><p>AES加密的模式是AES.MODE_CBC,初始化向量iv=’0102030405060708′,具体的AES加密</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># AES加密</span>def AESencrypt<span class="token punctuation">(</span>msg, key<span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true"># 如果不是16的倍数则进行填充(paddiing)</span>    padding <span class="token operator">=</span> 16 - len<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> % 16    <span class="token comment" spellcheck="true"># 这里使用padding对应的单字符进行填充</span>    msg <span class="token operator">=</span> msg + padding * chr<span class="token punctuation">(</span>padding<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用来加密或者解密的初始向量(必须是16位)</span>    iv <span class="token operator">=</span> <span class="token string">'0102030405060708'</span>.encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> key.encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    cipher <span class="token operator">=</span> AES.new<span class="token punctuation">(</span>key, AES.MODE_CBC, iv<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加密后得到的是bytes类型的数据</span>    encryptedbytes <span class="token operator">=</span> cipher.encrypt<span class="token punctuation">(</span>msg.encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">))</span>    <span class="token comment" spellcheck="true"># 使用Base64进行编码,返回byte字符串</span>    encodestrs <span class="token operator">=</span> base64.b64encode<span class="token punctuation">(</span>encryptedbytes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对byte字符串按utf-8进行解码</span>    enctext <span class="token operator">=</span> encodestrs.decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> enctext</code></pre><p>RSA加密.首先我简单介绍一下RSA的加密过程.在RSA中,明文,密钥和密文都是数字.RSA的加密过程可以用下列的公式来表达,这个公式非常的重要,你只有理解了这个公式,才能用Python实现RSA加密</p><pre class=" language-bash"><code class="language-bash">密文    <span class="token operator">=</span>    明文^E mod  N           <span class="token punctuation">(</span>RSA加密<span class="token punctuation">)</span></code></pre><p>RSA的密文是对代表明文的数字的E次方求mod N 的结果, 通俗的讲就是将明文和自己做E次乘法,然后将其结果除以N 求余数,这个余数就是密文.</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RSA加密</span><span class="token keyword">def</span> <span class="token function">RSAencrypt</span><span class="token punctuation">(</span>randomstrs<span class="token punctuation">,</span> key<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 随机字符串逆序排列</span>    string <span class="token operator">=</span> randomstrs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将随机字符串转换成byte类型数据</span>    text <span class="token operator">=</span> bytes<span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    seckey <span class="token operator">=</span> int<span class="token punctuation">(</span>codecs<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">**</span>int<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> int<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> format<span class="token punctuation">(</span>seckey<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span></code></pre><p>RSA加密后得到的字符串长为256,如果不够长则进行填充(不足部分在左侧添0).然后就是获取那两个参数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_params</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># msg也可以写成msg = {"offset":"页面偏移量=(页数-1) *　20", "limit":"20"},offset和limit这两个参数必须有(js)</span>    <span class="token comment" spellcheck="true"># limit最大值为100,当设为100时,获取第二页时,默认前一页是20个评论,也就是说第二页最新评论有80个,有20个是第一页显示的</span>    <span class="token comment" spellcheck="true"># msg = '{"rid":"R_SO_4_1302938992","offset":"0","total":"True","limit":"100","csrf_token":""}'</span>    <span class="token comment" spellcheck="true"># 偏移量</span>    offset <span class="token operator">=</span> <span class="token punctuation">(</span>page<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span>    <span class="token comment" spellcheck="true"># offset和limit是必选参数,其他参数是可选的,其他参数不影响data数据的生成</span>    msg <span class="token operator">=</span> <span class="token string">'{"offset":'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">',"total":"True","limit":"20","csrf_token":""}'</span>    key <span class="token operator">=</span> <span class="token string">'0CoJUm6Qyw8W8jud'</span>    f <span class="token operator">=</span> <span class="token string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span>    e <span class="token operator">=</span> <span class="token string">'010001'</span>    enctext <span class="token operator">=</span> AESencrypt<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 生成长度为16的随机字符串</span>    i <span class="token operator">=</span> generate_random_strs<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 两次AES加密之后得到params的值</span>    encText <span class="token operator">=</span> AESencrypt<span class="token punctuation">(</span>enctext<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># RSA加密之后得到encSecKey的值</span>    encSecKey <span class="token operator">=</span> RSAencrypt<span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    <span class="token keyword">return</span> encText<span class="token punctuation">,</span> encSecKey</code></pre><p>下面构造表单不再赘述，所有参数都已得到。如果想用selenium的大佬，可以自己尝试一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过坑获得了成功。用到的知识主要有-requestes-beautifulsoup-PyCryptodome等。&quot;&gt;&lt;a href=&quot;#想爬取遍地情圣的网易云评论区，发现有一堆坑，还好依赖着前人勉强踩过
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>k近邻算法</title>
    <link href="http://yoursite.com/2018/10/13/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/13/k近邻算法/</id>
    <published>2018-10-12T22:40:01.000Z</published>
    <updated>2018-10-14T15:53:14.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。"><a href="#k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。" class="headerlink" title="k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。"></a>k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。</h2><p>该算是原理是根据我们已知的特征值对应关系，对我们想要分类的新数据进行判断分类。比如我们想判断一个电影的题材那么我们就可以提取一定的特征值，电影中惊悚片段的次数等等，然后用该算法构造程序，自动化分。<br>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系。输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似数据（最近邻）的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数。最后，选择k个最相似数据中出现次数最多的分类，作为新数据的分类。</p><p>k近邻算法的流程<br>1收集数据：爬虫或者一些已存在的数据集<br>2准备数据：结构化数据格式<br>3分析数据：可用任何方法<br>4训练算法：（不适用于k近邻）<br>5测试算法：计算成功率<br>6使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输<br>入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理</p><p>请看代码：<br>1：导入数据</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator <span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    group <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> group<span class="token punctuation">,</span>labels</code></pre><p>定义一个标准数据集（每组包含两个数据）和标签，一一对应。我们将[1,1]定义为类A,依次类推。</p><hr><p>进行距离运算，预测类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">classify0</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span>labels<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSetsize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#计算训练数据集的行数</span>    diffMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span><span class="token punctuation">(</span>dataSetsize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet<span class="token punctuation">)</span>      sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span>    sqDistance <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将一轴上的数据相加</span>    distance <span class="token operator">=</span> sqDistance<span class="token operator">**</span><span class="token number">0.5</span>    sorteDistIndicies <span class="token operator">=</span> distance<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回distances中元素从小到大排序后的索引值</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        voteIlable <span class="token operator">=</span> labels<span class="token punctuation">[</span>sorteDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#key=operator.itemgetter(1)根据字典的值进行排序，reverse = True 以降序排列</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>这样我们就可以返回次数出现最高的标签进而输出预测值，但是我们无法判断这个分类是否正确，因此我们需要测试一下。</p><hr><p>以海伦约会为例:她把这些数据存放在文本文件datingTestSet.txt中<br>海伦的样本主要包含以下3种特征：<br> 每年获得的飞行常客里程数<br> 玩视频游戏所耗时间百分比<br> 每周消费的冰淇淋公升数<br>首先py读取收集到的txt文件数据，使其可以被使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">file2matrix</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    arrayoLine <span class="token operator">=</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    numberoflines <span class="token operator">=</span> len<span class="token punctuation">(</span>arrayoLine<span class="token punctuation">)</span>    returnMat <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>numberoflines<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    classLabelVectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> arrayoLine<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#去除空白</span>        listFormLine <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#以制表符为标志切片</span>        returnMat<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> listFormLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'didntLike'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'smallDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'largeDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        index<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> returnMat<span class="token punctuation">,</span>classLabelVector</code></pre><p>返回读取成功的数据集，和标签集合集合。先进行图形化分析一下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#创建一个画布</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>datingDataMat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>datingLabels<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">[</span>datingLabels<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#以特征值一和二为数据画图</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>图略，我们发现一些数字值相差太大影响我们的结果，因此我们进行归一化数值：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">autoNorm</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    minVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#min()中0对应列，1对应行。不输入测全部数据的最小值</span>    maxVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     ranges <span class="token operator">=</span> maxVals <span class="token operator">-</span> minVals    normDataSet <span class="token operator">=</span> zeros<span class="token punctuation">(</span>shape<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    normDataSet <span class="token operator">=</span> dataSet <span class="token operator">-</span> tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    normDataSet <span class="token operator">=</span> normDataSet<span class="token operator">/</span><span class="token punctuation">(</span>tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> normDataSet<span class="token punctuation">,</span>ranges<span class="token punctuation">,</span>minVals</code></pre><p>将最大的数值当作1，最小的当作0，其他等比例压缩。<br>通常我们只提供已有数据的90%作为训练样本来训练分类<br>器，而使用其余的10%数据去测试分类器，检测分类器的正确率。本书后续章节还会介绍一些高级方法完成同样的任务，这里我们还是采用最原始的做法。需要注意的是，10%的测试数据应该是随机选择的，由于海伦提供的数据并没有按照特定目的来排序，所以我们可随意选择10%数据而不影响其随机性。</p><hr><p>代码里我们定义一个计数器变量，每次分类器错误地分类数据，计数器就加1，程序执行完成之后计数器的结果除以数据点总数即是错误率<br>进入正题测试预测结果：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">datingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    horatio <span class="token operator">=</span> <span class="token number">0.10</span>    datingDataMat<span class="token punctuation">,</span>datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span><span class="token string">'datingTestSet,txt'</span><span class="token punctuation">)</span>    normMat<span class="token punctuation">,</span>ranges<span class="token punctuation">,</span>minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    m <span class="token operator">=</span> normMat<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    numTestVecs <span class="token operator">=</span> int<span class="token punctuation">(</span>m<span class="token operator">*</span>horatio<span class="token punctuation">)</span>    errCount <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">:</span>        classifreResult <span class="token operator">=</span> classify0<span class="token punctuation">(</span>normMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>normMat<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>datingLabels<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类结果:%s\t真实类别:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> classifierResult <span class="token operator">!=</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误率:%f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount <span class="token operator">/</span> float<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>一个简单的分类系统就做好了，我们需要优化一下。让海伦找到自己理想的伴侣</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calssifyPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'not at all'</span><span class="token punctuation">,</span><span class="token string">'in small doses'</span><span class="token punctuation">,</span><span class="token string">'in large doses'</span><span class="token punctuation">]</span>    percentTats<span class="token operator">=</span>float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"percentage of time spent playing video games?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ffMiles<span class="token operator">=</span>float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"frequent flier miles earned per year?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    iceCream<span class="token operator">=</span>float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"liters of ice cream consumed per year?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    datingDataMat<span class="token punctuation">,</span>datingLabels<span class="token operator">=</span>file2matrix<span class="token punctuation">(</span><span class="token string">'datingTestSet2.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原书没有2</span>    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    inArr<span class="token operator">=</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>ffMiles<span class="token punctuation">,</span>percentTats<span class="token punctuation">,</span>iceCream<span class="token punctuation">]</span><span class="token punctuation">)</span>    classifierResult<span class="token operator">=</span>classify0<span class="token punctuation">(</span><span class="token punctuation">(</span>inArr<span class="token operator">-</span>minVals<span class="token punctuation">)</span><span class="token operator">/</span>ranges<span class="token punctuation">,</span>normMat<span class="token punctuation">,</span>datingLabels<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You will probably like this person:"</span><span class="token punctuation">,</span> resultList<span class="token punctuation">[</span>classifierResult<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>我们输入对应的数据，代码帮我们输出他适不适合海伦（错过了真命天子就嘿嘿了）</p><hr><h2 id="我们还可以通过k近邻算法，做一个手写识别系统"><a href="#我们还可以通过k近邻算法，做一个手写识别系统" class="headerlink" title="我们还可以通过k近邻算法，做一个手写识别系统"></a>我们还可以通过k近邻算法，做一个手写识别系统</h2><p>注图像已经经过处理为黑白图像（由0，1）字符组成。</p><p>00000000000011110000000000000000<br>00000000000111111000000000000000<br>00000000001111111100000000000000<br>00000000000111111111100000000000<br>00000000001111111111110000000000<br>00000000001111111111111000000000<br>00000000011111101111111000000000<br>00000000011111000111111000000000<br>00000000011111000011111100000000<br>00000000111110000001111110000000<br>00000001111100000001111110000000<br>00000001111100000000011110000000<br>00000001111100000000011111000000<br>00000001111100000000011111000000<br>00000001111100000000011111000000<br>00000001111100000000011111000000<br>00000011111100000000011111000000<br>00000001111100000000001111000000<br>00000001111110000000001111000000<br>00000001111100000000001111000000<br>00000001111100000000011111000000<br>00000001111100000000011111000000<br>00000001111110000000011111000000<br>00000001111110000001111110000000<br>00000000111110000001111110000000<br>00000000111111000011111100000000<br>00000000011111000011111000000000<br>00000000011111111111111000000000<br>00000000011111111111111000000000<br>00000000001111111111100000000000<br>00000000000011111111110000000000<br>00000000000000111110000000000000</p><p>将数据转化为测试向量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">img2Vector</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    returnVect <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span>filenaem<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lineStr <span class="token operator">=</span> fr<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            returnVect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">[</span>lineStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> returnVect</code></pre><p>我们将这些数据输入到分类器，检<br>测分类器的执行效果。程序清单2-6所示的自包含函数handwritingClassTest()是测试分类器的代码，将其写入kNN.py文件中。在写入这些代码之前，我们必须确保将from os import listdir写入文件的起始部分，这段代码的主要功能是从os模块中导入函数listdir，它可以列出给定目录的文件名。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys<span class="token keyword">def</span> <span class="token function">handwritingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    hwLabels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        trainingFileList<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'trainingDigits'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改 import os 这里加上os.</span>        m<span class="token operator">=</span>len<span class="token punctuation">(</span>trainingFileList<span class="token punctuation">)</span>        trainingMat<span class="token operator">=</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#定义文件数x每个向量的训练集</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            fileNameStr<span class="token operator">=</span>trainingFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            fileStr<span class="token operator">=</span>fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#解析文件</span>            classNumStr<span class="token operator">=</span>int<span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#解析文件名</span>            hwLabels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#存储类别</span>            trainingMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>img2vector<span class="token punctuation">(</span><span class="token string">'trainingDigits/%s'</span><span class="token operator">%</span>fileNameStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#访问第i个文件内的数据</span>        <span class="token comment" spellcheck="true">#测试数据集</span>        testFileList<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'testDigits'</span><span class="token punctuation">)</span>        errorCount<span class="token operator">=</span><span class="token number">0.0</span>        mTest<span class="token operator">=</span>len<span class="token punctuation">(</span>testFileList<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">:</span>            fileNameStr<span class="token operator">=</span>testFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            fileStr<span class="token operator">=</span>fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            classNumStr<span class="token operator">=</span>int<span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从文件名中分离出数字作为基准</span>            vectorUnderTest<span class="token operator">=</span>img2vector<span class="token punctuation">(</span><span class="token string">'testDigits/%s'</span><span class="token operator">%</span>fileNameStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#访问第i个文件内的测试数据，不存储类 直接测试</span>            classifierResult<span class="token operator">=</span>classify0<span class="token punctuation">(</span>vectorUnderTest<span class="token punctuation">,</span>trainingMat<span class="token punctuation">,</span>hwLabels<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the classifier came back with: %d,the real answer is: %d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span>classNumStr<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>classifierResult<span class="token operator">!=</span>classNumStr<span class="token punctuation">)</span><span class="token punctuation">:</span>                errorCount<span class="token operator">+=</span><span class="token number">1.0</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nthe total number of errors is: %d"</span> <span class="token operator">%</span> errorCount<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nthe total rate is:%f"</span><span class="token operator">%</span> <span class="token punctuation">(</span>errorCount<span class="token operator">/</span>float<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>两个函数就完成了这个识别系统，代码和数据集在github上都有，这里不在贴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。&quot;&gt;&lt;a href=&quot;#k近邻算法，简单的来说就是根据测量不同特征值之间的距离进而对数据集进行分类。&quot; class=&quot;headerlink&quot; title=&quot;k近邻算法，简单的来说就是根据测
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>解析库Beautiful-Soup</title>
    <link href="http://yoursite.com/2018/09/28/class2/"/>
    <id>http://yoursite.com/2018/09/28/class2/</id>
    <published>2018-09-28T11:27:23.126Z</published>
    <updated>2018-10-19T16:27:08.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Beautoful-Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工作，大大提高了解析效率。"><a href="#Beautoful-Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工作，大大提高了解析效率。" class="headerlink" title="Beautoful Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工作，大大提高了解析效率。"></a>Beautoful Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工作，大大提高了解析效率。</h3><pre><code>1：首先确保我们已经安装了Beautiful Soup 和 lxml. lxml的安装建议不要直接用pip install lxml，会遇到难以消除的错误，从官网直接下载.whl文件（注意和你的Python版本匹配）然后进行安装，亲测方便快捷。Beautiful Soup 支持四种解析库，我们推荐使用lxml（速度快，容错能力强，可以解析html 和 xml)。话不多说上代码。</code></pre><pre class=" language-python"><code class="language-python">    如果还未安装的话，可以命令行输入$ pip install beautifulsoup4    <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup    <span class="token keyword">import</span> re    html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>    &lt;body>    &lt;p class="title" name="dromouse">&lt;b>The Dormouse's story&lt;/b>&lt;/p>    &lt;p class="story">Once upon a time there were three little sisters; and their names were    &lt;a href="http://example.com/elsie" class="sister" id="link1">&lt;!-- Elsie -->&lt;/a>,    &lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and    &lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;    and they lived at the bottom of a well.&lt;/p>    &lt;p class="story">...&lt;/p>    """</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#也可以不适用lxml 库使用默认的解析库</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#推荐使用lxml 解析</span>    <span class="token comment" spellcheck="true">#尝试输出一下</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>发现结果如下，我们的html代码被调整好了格式,不再是那么一坨</code></pre><pre class=" language-python"><code class="language-python">    <span class="token operator">&lt;</span>html<span class="token operator">></span>     <span class="token operator">&lt;</span>head<span class="token operator">></span>      <span class="token operator">&lt;</span>title<span class="token operator">></span>       The Dormouse's story      <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>     <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span> name<span class="token operator">=</span><span class="token string">"dromouse"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>b<span class="token operator">></span>        The Dormouse's story       <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">></span>       Once upon a time there were three little sisters<span class="token punctuation">;</span> <span class="token operator">and</span> their names were       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>       <span class="token punctuation">,</span>       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> id<span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">></span>        Lacie       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>       <span class="token operator">and</span>       <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">></span>        Tillie       <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>       <span class="token punctuation">;</span>    <span class="token operator">and</span> they lived at the bottom of a well<span class="token punctuation">.</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">></span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><pre><code>这就是我们要介绍的第一个方法 prettify(). 这个方法将需要解析的字符串以标准的格式缩进格式输出，有一点需要注意一下，如果我们原来的字符串没有闭合的话(比如缺少&lt;/a&gt;)经过这个调用会自动更正格式，补全代码（但这一步不是这个函数做的，而是进行初始化时就已经自动完成。）我们学习解析库肯定是要学如何提取信息的啊，那么怎么办呢：</code></pre><h2 id="节点选择器-栗子"><a href="#节点选择器-栗子" class="headerlink" title="节点选择器-栗子"></a>节点选择器-栗子</h2><pre class=" language-python"><code class="language-python">    html 同上面的    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        The Dormouse's story        <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span> name<span class="token operator">=</span><span class="token string">"dromouse"</span><span class="token operator">></span><span class="token operator">&lt;</span>b<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bs4.element.Tag'</span><span class="token operator">></span>        很直观的看到我们可以通过节点选择器简单的提取信息，选择器解析到的是Tag类型，其中的string属性可以得到节点的文本内容。那么只能提取到文本内容吗，显然不是。    <span class="token operator">>></span><span class="token operator">></span>列举一下信息提取方式    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#获取节点的名称</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#可以获取该节点的所有属性，比如id class name等等，它返回一些字典型数据，假如我们只想要其中一个属性那么可以这样</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  如果你觉得这样很烦，那么可以更直接一点    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">**</span><span class="token operator">**</span>划重点了 提取出的属性值不一定唯一，name值一般只有一个所以输出为文本类型的，但同一标签里会有很多个<span class="token keyword">class</span>属性，因此<span class="token keyword">class</span>属性提取结果为列表型。    每一步提取出来的节点都是'bs4<span class="token punctuation">.</span>element<span class="token punctuation">.</span>Tag类型的，也就意味着我们可以二次提取，嵌套操作！    <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    这一步我们先提取出head 节点，然后再次调用节点选择器，提取出title<span class="token punctuation">.</span></code></pre><h2 id="关联选择。"><a href="#关联选择。" class="headerlink" title="关联选择。"></a>关联选择。</h2><p>网页结构并不是我们理想的那种，有时候我们需要多次选择，从一个基准出发然后选择他的子节点，父节点，兄弟节点（没有姐妹节点）。<br>1——选择节点元素后，如果想直接获得直接子节点我们调用contents属性即可。</p><pre class=" language-python"><code class="language-python">（<span class="token number">1</span>）子节点<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span> 原来的html 去除第一个p标签。soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'Once upon a time there were three little sisters; and their names were\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">',\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> id<span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">></span>Lacie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">' and\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">></span>Tillie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">';\nand they lived at the bottom of a well.'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以看出返回结果为列表形式，这里列举的全是直接子节点，假如这些节点内部还有节点（孙节点），也不会单独列出来而是包含在对应的父节点里。</span>不知你有没有想过为什么叫子节点，是不是有个children属性，答案是肯定的，真的有children属性，我们也可以通过调用它来提取子节点。<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span class="token operator">&lt;</span>list_iterator object at <span class="token number">0x00000252F0878BE0</span><span class="token operator">></span> 这是一个迭代器，我们可以通过遍历提取出所有的内容。也可以通过list将其转化为列表（但没必要这么做）<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Once upon a time there were three little sisters<span class="token punctuation">;</span> <span class="token operator">and</span> their names were    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> id<span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> Elsie <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token punctuation">,</span>    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> id<span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">></span>Lacie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>     <span class="token operator">and</span>    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> id<span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">></span>Tillie<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token punctuation">;</span>    <span class="token operator">and</span> they lived at the bottom of a well<span class="token punctuation">.</span>（<span class="token number">2</span>）父节点，祖先节点。如果你想把这个节点下的所有节点都列出来（子节点，子孙节点。。。。。）那么你可以调用descendants属性，同样这也是一个迭代器类<span class="token punctuation">.</span>那么父节点相信你们也能猜一下喽，parents属性就可以调用，不在贴代码，自己实践一下吧。既然有子孙节点，那么祖先节点也一定存在（不要问为什么没有爷爷节点）对应的属性为parents<span class="token punctuation">.</span>说完了先辈和后代，当然不能忘记同辈，我们还有兄弟节点需要了解一下。ps____这里不在赘述代码。（<span class="token number">3</span>）兄弟节点<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>prevoius_sibing<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>prevoius_sibings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span>分别可以得到你选择节点的下一个兄弟元素，上一个兄弟元素，以及前面所有兄弟元素的生成器，后面所有元素的生成器。（<span class="token number">4</span>）提取信息前面已经讲了关联节点的选择方法，既然选择到了对应的节点那么如何获取对应的信息呢，我们的目的是提取信息的呀！html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;body>&lt; p class='story'>once upon a time&lt;a href="http://www.baidu.com" class ="sister" id = 'link1'>Bob&lt;/a>&lt;a href='http://127.0.0.1:5000' class ='brother' id = 'link2'>Lacie&lt;/a>&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>j<span class="token operator">=</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 选取的生成器元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取特定节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attr<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取节点的class属性</span>和我们刚开始讲的方法是一样的！</code></pre><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器."></a>方法选择器.</h2><p>上面的选择方法是通过属性选择，速度比较快，但明显不够灵活，还好BeautifulSoup 为我们提供了类似于正则表达式的一种查询方法find_all() find()等，输入对应的参数就可以灵活查询。<br>1：find_all() 和正则的findall()功能类似，但需要的不再是正则表达式，而是一些属性或者文本进行查询操作。</p><p>(1)name 故名思意通过节点的名称来查询</p><pre class=" language-python"><code class="language-python">它的标准形式是find_all<span class="token punctuation">(</span>name<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>recursive<span class="token punctuation">,</span>text<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class = 'A'>&lt;div class = 'A_B'>&lt;h4> hello &lt;/h4>&lt;/div>&lt;div class="body">&lt;ul class='list' id = 'list-1'>&lt;li class='element'>A&lt;/li>&lt;li class='element'>B&lt;/li>&lt;li class='element'>C&lt;/li>&lt;/ul>&lt;ul class='list list-small' id = 'list-2'>&lt;li class='element'>A&lt;/li>&lt;li class='element'>B&lt;/li>&lt;/ul>&lt;/div>&lt;/div>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list list-small"</span> id<span class="token operator">=</span><span class="token string">"list-2"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">]</span>    <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bs4.element.Tag'</span><span class="token operator">></span>通过返回结果我们可以清晰的看到返回的是列表形式，其中每一个均为bs4<span class="token punctuation">.</span>element<span class="token punctuation">.</span>Tag类型。既然是这种类型那么显然我们可以嵌套查询<span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>那么我们要获取每个li节点的信息也就顺理成章的可以写成<span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> ul<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre><p>(2) attrs</p><pre class=" language-python"><code class="language-python">我们也可以输入属性查询例如：<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'list-1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>该参数为字典类型attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'**'</span><span class="token punctuation">:</span> <span class="token string">"***"</span><span class="token punctuation">}</span>对于一些常用的属性比如id <span class="token keyword">class</span> 我们可以不用attrs传递（可能是因为懒吧）我们可以这么做：<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">'list-1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span> <span class="token string">'element'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list"</span> id<span class="token operator">=</span><span class="token string">"list-1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>A<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"element"</span><span class="token operator">></span>B<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span>可能有人要问为什么<span class="token keyword">class</span>要加下划线，因为<span class="token keyword">class</span>在Python里是关键字，我们这里需要区分一下。</code></pre><p>(3)text 匹配节点的文本，传入的可以是字符串，或者正则表达式（有点抢饭碗的意思）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text <span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>返回所有匹配正则表达式的节点文本组成的列表。</code></pre><p>2-find() 返回单个元素，其他用法和find_all()相同还有一些方法，比如说</p><pre class=" language-python"><code class="language-python">find_parents<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span>find_parent<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回祖先节点 /返回父节点</span>find_next_siblings<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> find_next_siblings <span class="token comment" spellcheck="true">#返回后面所有兄弟节点/返回后面的第一个兄弟节点</span>find_previous_siblings<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> find_previous_sibling<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回前面所有兄弟节点/返回前面第一个兄弟节点</span>find_all_next <span class="token operator">/</span> find_next <span class="token comment" spellcheck="true">#返回节点后所有符合条件的节点/ 返回第一个</span>find_all_previous<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> find_previous<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#返回节点前所有符合条件的节点/ 返回第一个</span></code></pre><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>如果对web熟悉的话那么CSS选择器你肯定很熟悉，不熟悉的话可以找一下教程。<br>使用CSS选择器我们需要调用select()方法，传入相应的CSS选择器即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.A .A_B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"#list-1 .element"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支持嵌套选择</span><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性方法同上面所讲不在赘述</span><span class="token comment" spellcheck="true"># 获取文本多加了一个方法get_text()</span><span class="token keyword">for</span> li <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre><p>o文明k，大概就这么多东西。推荐lxml库，节点选择器速度快但是很繁琐。建议使用find_all(),如果对CSS选择器熟悉的话，推荐select()方法选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Beautoful-Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工作，大大提高了解析效率。&quot;&gt;&lt;a href=&quot;#Beautoful-Soup借助网页的结构和属性来进行解析网页，比正则表达式要简便的多。省去很多繁琐的提取工
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>requests 库 and 正则表达式</title>
    <link href="http://yoursite.com/2018/09/21/class1/"/>
    <id>http://yoursite.com/2018/09/21/class1/</id>
    <published>2018-09-21T08:35:33.000Z</published>
    <updated>2018-10-14T14:03:45.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的讲一下requests-请求库"><a href="#简单的讲一下requests-请求库" class="headerlink" title="简单的讲一下requests 请求库"></a>简单的讲一下requests 请求库</h3><p>首先确定你已经安装了requests库，如果没有的话</p><pre class=" language-python"><code class="language-python">pip install requests</code></pre><p>请求可以这样写</p><pre class=" language-python"><code class="language-python">$      r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对应GET</span>$     data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">}</span>$     r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对应POST 提交表单, data为表单数据，以字典型数据存储</span>$     <span class="token comment" spellcheck="true">#主要前两种后面几乎用不到</span>$     r <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对应PUT</span>$     r <span class="token operator">=</span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对应删除DELETE</span>$     r <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#</span></code></pre><p>很方便的看出请求很简单，一行代码就可以完成请求，但是这只是一般网站的主页，我们肯定是要去其他部分提取信息的，所以会附加一大串的参数，比如</p><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get?name=germey&amp;age=22'</span><span class="token punctuation">)</span>  </code></pre><p>虽然也能完成任务，但翻页操作什么的每次都构造这个显然是不够好用，这个库当然不会让我们用这么笨的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> age <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parmas <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"germey"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span> <span class="token punctuation">:</span> age    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span>parmas <span class="token operator">=</span> parmas<span class="token punctuation">)</span>成功完成附加参数的提交我们还可能遇到一个最low的反爬措施（知乎） 通过User<span class="token operator">-</span>Agent 浏览器标识来反爬虫，这个我们可以构造headers轻易的破解，还有一些需要登陆才能操作的网站同样也可以通过构造headersheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'ABTEST=0|1534834504|v1; SNUID=1C3DF36DB3B6C05E33DD8DD8B303CE03; IPLOC=CN3201; SUID=AF8E41DF3E18960A000000005B7BB748; SUID=AF8E41DF2C18960A000000005B7BB748; SUV=00151DF1DF418EAF5B7BB74C32B4D814; weixinIndexVisited=1; ppinf=5|1534908615|1536118215|dHJ1c3Q6MToxfGNsaWVudGlkOjQ6MjAxN3x1bmlxbmFtZTo2OlBzeWNob3xjcnQ6MTA6MTUzNDkwODYxNXxyZWZuaWNrOjY6UHN5Y2hvfHVzZXJpZDo0NDpvOXQybHVJV0FROGwzSTFjYlg3M3Z1akxfd3prQHdlaXhpbi5zb2h1LmNvbXw; pprdig=xm9mkmMYDlvMRbH0pAjDEpcsEDCvoz3ORcB-9-lzvVhkxyM55AmN7NQJ8KU3Ei67B6DAqmo_DjyIu3NchvKgznUCthv3eMG2u_T1MhiMkJD7nV3HrDRKv0KVeNyQnt4Zl6D4y1v8SlHfHd-6aGhSCKW_NDIv_JqJmP-7eWQgsKw; sgid=22-36710215-AVt82MciatqU4SaMibG2iceyUs; sct=3; ppmdig=1534925103000000f514b9c5b91510b7cd851626696ec141; JSESSIONID=aaaGoZeH3bNXx-s9OFBvw; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span> <span class="token punctuation">:</span> <span class="token string">'weixin.sogou.com'</span><span class="token punctuation">,</span>    <span class="token string">'Upgrade-Insecure-Requests'</span> <span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span><span class="token punctuation">}</span>requests<span class="token punctuation">,</span>get<span class="token punctuation">(</span><span class="token string">'http://weixin.sogou.com'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>当然也可以cookies <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>requests<span class="token punctuation">,</span>get<span class="token punctuation">(</span><span class="token string">'http://weixin.sogou.com'</span><span class="token punctuation">,</span>cookies <span class="token operator">=</span> cookies<span class="token punctuation">)</span>但显然直接复制更方便如果遇到反爬措施怎么更换代理呢，requests也有十分简单的方法，类似于上面的参数提交proxies <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"http"</span> <span class="token punctuation">:</span> <span class="token string">"http:127.0.0.1:8080"</span><span class="token punctuation">,</span>    <span class="token string">"https"</span> <span class="token punctuation">:</span> <span class="token string">"https://127.0.0.0:5555"</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http:www.zhihu.com'</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#当然上面的代理是不能用的，你可以找国内哪些免费网站上寻找，或者用后续的维护一个代理池，当然付费代理最为好用。</span>还有一个超时操作的处理直接在末尾的timeout 参数赋值即可，如果你使用的是GET、OPTIONS、POST、PUT、PATCH 或者 DELETE，那么你可以通过 allow_redirects 参数禁用重定向处理：r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://github.com'</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 ConnectionError 异常。</p><p>如果 HTTP 请求返回了不成功的状态码， Response.raise_for_status() 会抛出一个 HTTPError 异常。</p><p>若请求超时，则抛出一个 Timeout 异常。</p><p>若请求超过了设定的最大重定向次数，则会抛出一个 TooManyRedirects 异常。</p><p>所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException 。<br>我们通过上面的设置，利用try except 函数可以容易的捕获这些错误<br>此外还有一些证书认证操作，比如12306,他们的证书没有被官方认证，所以爬取会报错，这个设置也很简单。把 verify 参数设置为False 即可，不过会提醒我们一个警告，我们可以选择忽略他，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages <span class="token keyword">import</span> urllib3urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https//www.12306.cn'</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>讲完了请求那么我们获取的数据怎么拿到呢。</p><pre class=" language-python"><code class="language-python">r<span class="token punctuation">.</span>status_code  <span class="token comment" spellcheck="true">#获取响应码，判断自己是否成功访问网站</span>r<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true">#将源码转换为text格式</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  <span class="token comment" spellcheck="true"># 改变网页源码的编码格式，一般是gbk,或者utf-8</span>r<span class="token punctuation">.</span>url <span class="token comment" spellcheck="true">#获取请求的网址</span>type<span class="token punctuation">(</span><span class="token operator">**</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出内容的格式，比如text,json ,dict</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#可以发现，调用json(）方法，就可以将返回结果是 JSON 格式的字符串转化为字典dict</span>r<span class="token punctuation">.</span>content  <span class="token comment" spellcheck="true">#图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式， 我们才可以看到这些形形色色的多媒体 所以，想要抓取它们，就要拿到它们的二进制码</span></code></pre><h3 id="正则re"><a href="#正则re" class="headerlink" title="正则re"></a>正则re</h3><pre class=" language-python"><code class="language-python">pip install re</code></pre><p>正则表达式是处理字符串的强大工具，它有向己特定的语法结构，有了它，实现字符串的检索、替换、匹配验证都不在话下当然,对于爬虫来说，有了它，从HTML 里提取想要的信息就非常方便了<br>可以在开源中国里练手，强大的在线匹配功能<a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">http://tool.oschina.net/regex/</a><br>正则不是python独有的，其他编程语言中也有，re库是整个正则表达式的实现，很方便实用。</p><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>这个函数可以检测你的正则表达式是否能成功匹配数据，如果失败就返回None,代表匹配失败。举个栗子！</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对应正则表达式，字符串，标识符</span>栗子：    <span class="token keyword">import</span> re    str <span class="token operator">=</span> <span class="token string">"Hello 123 456 World is a demo"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello\s\d\d\d\s\d{3}\s\w{5}'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们的正则表达式以^作为开头，然后\s匹配空白字符，\d匹配数字,\d{3}代表匹配三个数字，\w{5},匹配字母数字或下划线共五个。我们运行一下发现匹配到了 Hello 123 456 World，调用group()获取匹配内容，span()获取匹配范围。match()函数有两个参数，1为正则，二为待匹配字符串。<br>如果我们想要得到某一具体内容怎么办呢，比如只想得到123。那么我们可以在正则表达式中用()把它括起来</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello\s(\d+)\s\d{3}\sWorld'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样难免有点繁琐，我们使用通用匹配就很方便——.<em>(.可匹配除换行符之外的任意字符。</em>匹配无限次)完成上面的匹配，我们可以这样写</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello.*demo'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>那么这样真的没有缺点吗，答案是否定的：比如你想得到123这个数字</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello.*(\d+).*demo'</span>，str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行一下发现结果不如人意并不是我们想要的</code></pre><p>这里就涉及到贪婪和非贪婪的问题，.<em>会匹配尽可能多的字符（贪婪匹配），我们只需要简单的更改就能成功(加？)<br>.</em>? 是非贪婪匹配，匹配尽可能少的字符，到数字的前面时就默认停止匹配，从而让我们得到正确的结果<br>但这里需要注意，如果匹配的结果在字符串结尾，.*?就有可能匹配不到任何内容了，因为它<br>匹配尽可能少的字符 例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">'http://weibo.com/comment/KEraCN'</span>result1 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'http.*?comment/(.*?)'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>result2 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'http.*?comment/(.*)'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result1"</span><span class="token punctuation">,</span>result1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result2'</span><span class="token punctuation">,</span> result2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span>result1result2 KEraCN</code></pre><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式 修饰符被指定为一个可选的标志。<br>我们改一下字符串 </p><pre class=" language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"Hello 123 456 World is a demo"</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello.*demo'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>发现报错，未成功得到字符这是因为．匹配的是除换行符之外的任意字符，当遇到换行符时，<span class="token punctuation">.</span><span class="token operator">*</span>?就不能匹配了，所以导致匹配失败这里只需加一个修饰符 re<span class="token punctuation">.</span>S ，即可修正这个错误：result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^Hello.*demo'</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>re<span class="token punctuation">.</span>I  <span class="token comment" spellcheck="true">#使匹配大小写不敏感</span>re<span class="token punctuation">.</span>S  <span class="token comment" spellcheck="true">#使.匹配包括换行符在内的所有字符</span>还有其他不常用，自己去查阅吧</code></pre><p>那么如果我们要匹配的字符包含.或者其他的特殊字符怎么办呢，比如匹配网址<a href="http://www.baidu.com。" target="_blank" rel="noopener">http://www.baidu.com。</a> 这个时候就要用到强大的转义字符了</p><pre class=" language-python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'(百度）www.baidu.com'</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'\(百度\)www\.baidu\.com'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>match()方法是从字符串的开头匹配，我们用它来提取信息显然不方便，更适合用来检测某个字符串是否符合规则，所以我们介绍search()-扫描整个字符串返回第一个成功匹配的结果，没找到则返回None.</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对应正则表达式，字符串，标识符</span>栗子：    <span class="token keyword">import</span> re    html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div id = 'song-list'>    &lt;h2 class = 'title'>经典老歌&lt;/h2>    &lt;p class ='introduction'>    经典老歌列表&lt;/p>    &lt;ul id ='list' class = 'list-gruop'>    &lt;li data-view ='2'>一路有你&lt;/li>    &lt;li data-view='7'>    &lt;a href='/2.mp3' singer='任贤齐'>沧海一声笑&lt;/a>    &lt;/li>    &lt;li data-view = '4' class ='active'>    &lt;a href='/3.mp3' singer='齐秦'>往事随风&lt;/a>    &lt;/li>    &lt;li data-view='6'>&lt;a href='/4.mp3' singer = 'beyond'>光辉岁月&lt;/a>&lt;/li>    &lt;li data-view='5'>&lt;a href='/5.mp3' singer = '陈慧琳'>记事本&lt;/a>&lt;/li>    &lt;li data-view='5'    &lt;a href ='/6.mp3' singer='邓丽君'>但愿人长久&lt;/a>    &lt;/li>    &lt;/ul>    &lt;/div>'''</span>    result <span class="token operator">=</span> re<span class="token punctuation">,</span>search<span class="token punctuation">(</span><span class="token string">'&lt;li.*?active.*?singer='</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token string">'>(.*?)&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>齐秦往事随风    result <span class="token operator">=</span> re<span class="token punctuation">,</span>search<span class="token punctuation">(</span><span class="token string">'&lt;li.*?singer='</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token string">'>(.*?)&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>任贤齐沧海一声笑    假如我们去掉换行符re<span class="token punctuation">.</span>S    result <span class="token operator">=</span> re<span class="token punctuation">,</span>search<span class="token punctuation">(</span><span class="token string">'&lt;li.*?singer='</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token string">'>(.*?)&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>beyond光辉岁月</code></pre><h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>search方法只能返回一个值，显然不足以满足我们的需求，findall方法返回所有符合要求的字符串，以列表的形式存储。</p><pre class=" language-python"><code class="language-python">    re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    html 同上    results <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;li.*?href='</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token string">'.*?singer='</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token string">'>(.*?)&lt;/a>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>自己运行吧</code></pre><h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><p>除了提取信息我们还可用用正则修改文本，这时候就用到了sub()方法。还以上面的为例</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>html <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'&lt;a.*?>|&lt;/a>'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>html<span class="token punctuation">)</span>    results <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;li.*?>(.*?)&lt;/li>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span>自己运行吧</code></pre><h2 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h2><p>前面所讲的方法都是用来处理字符串的方法，最后再介绍一下 compile()方法，这个方法可以将<br>正则字符串编译成正则表达式对象，以便在后面的匹配中复用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re contnet <span class="token operator">=</span> <span class="token string">'2018-2-11 12:00'</span>pattrtn <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'\d{2}:\d{2}'</span><span class="token punctuation">)</span></code></pre><p>另外， compile()还可以传入修饰符，例如 re.S等修饰符，这样search(),findall()等方法中<br>就不需要额外传了 所以compile()方法可以说是给正则表达式做了一层封装，以使我们更好地复用</p><p>ok 扯淡完毕本节结束具体看实例吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单的讲一下requests-请求库&quot;&gt;&lt;a href=&quot;#简单的讲一下requests-请求库&quot; class=&quot;headerlink&quot; title=&quot;简单的讲一下requests 请求库&quot;&gt;&lt;/a&gt;简单的讲一下requests 请求库&lt;/h3&gt;&lt;p&gt;首先确定你已
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>反爬微信搜狗文章</title>
    <link href="http://yoursite.com/2018/09/01/weixin/"/>
    <id>http://yoursite.com/2018/09/01/weixin/</id>
    <published>2018-08-31T16:00:01.000Z</published>
    <updated>2018-10-14T14:06:20.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这个爬虫用到了代理池，Pyquery解析库，requests请求库-and-万年不变的MongoDB数据库"><a href="#这个爬虫用到了代理池，Pyquery解析库，requests请求库-and-万年不变的MongoDB数据库" class="headerlink" title="这个爬虫用到了代理池，Pyquery解析库，requests请求库,and 万年不变的MongoDB数据库."></a>这个爬虫用到了代理池，Pyquery解析库，requests请求库,and 万年不变的MongoDB数据库.</h3><p>完成这个爬虫我们需要做下列准备，首先当然是分析一下网页的结构，我们可以随便搜索一下，发现如果不登录可以看前十页内容，登陆后可以看到100页，而且每页出现一堆文章列表，打开开发者模式发现他们都各自包含一个超链接，指向微信文章。原来搜狗已经用自己的爬虫爬取了一次文章，然后打包为自己的搜索内容，然而我们多次刷新后会出现验证界面，也就是搜狗的反爬虫机制，这也是我们开头说要用代理的原因，原理基本就是这样，然后贴代码。</p><p>首先是设置heads,也就是模拟登陆，网站采取cookies来验证是否登陆，因此我们只需把这些复制过去，</p><pre class=" language-python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Cookie'</span> <span class="token punctuation">:</span> <span class="token string">'ABTEST=0|1534834504|v1; SNUID=1C3DF36DB3B6C05E33DD8DD8B303CE03; IPLOC=CN3201; SUID=AF8E41DF3E18960A000000005B7BB748; SUID=AF8E41DF2C18960A000000005B7BB748; SUV=00151DF1DF418EAF5B7BB74C32B4D814; weixinIndexVisited=1; ppinf=5|1534908615|1536118215|dHJ1c3Q6MToxfGNsaWVudGlkOjQ6MjAxN3x1bmlxbmFtZTo2OlBzeWNob3xjcnQ6MTA6MTUzNDkwODYxNXxyZWZuaWNrOjY6UHN5Y2hvfHVzZXJpZDo0NDpvOXQybHVJV0FROGwzSTFjYlg3M3Z1akxfd3prQHdlaXhpbi5zb2h1LmNvbXw; pprdig=xm9mkmMYDlvMRbH0pAjDEpcsEDCvoz3ORcB-9-lzvVhkxyM55AmN7NQJ8KU3Ei67B6DAqmo_DjyIu3NchvKgznUCthv3eMG2u_T1MhiMkJD7nV3HrDRKv0KVeNyQnt4Zl6D4y1v8SlHfHd-6aGhSCKW_NDIv_JqJmP-7eWQgsKw; sgid=22-36710215-AVt82MciatqU4SaMibG2iceyUs; sct=3; ppmdig=1534925103000000f514b9c5b91510b7cd851626696ec141; JSESSIONID=aaaGoZeH3bNXx-s9OFBvw; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span> <span class="token punctuation">:</span> <span class="token string">'weixin.sogou.com'</span><span class="token punctuation">,</span>    <span class="token string">'Upgrade-Insecure-Requests'</span> <span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span><span class="token punctuation">}</span></code></pre><p>当然cookies会过期复制这个是没用的。然后就是请求网页。</p><pre class=" language-python"><code class="language-python">$    <span class="token keyword">global</span> PROXY    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> PROXY<span class="token punctuation">:</span>            proxies <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'http'</span> <span class="token punctuation">:</span> <span class="token string">'http://'</span> <span class="token operator">+</span> PROXY            <span class="token punctuation">}</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> allow_redirects <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> headers <span class="token punctuation">,</span> proxies <span class="token operator">=</span> proxies<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> allow_redirects <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">302</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"302"</span><span class="token punctuation">)</span>            proxy <span class="token operator">=</span> get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> proxy<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Using Proxy'</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>                <span class="token keyword">return</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Get Proxy Failed"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> None    <span class="token keyword">except</span> ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error Occurred"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>args<span class="token punctuation">)</span>        proxy <span class="token operator">=</span> get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">,</span>count<span class="token punctuation">)</span>    <span class="token keyword">except</span> Timeout <span class="token keyword">as</span> T<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error Occurred"</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>args<span class="token punctuation">)</span>        proxy <span class="token operator">=</span> get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">,</span> count<span class="token punctuation">)</span></code></pre><p>这里我们获取搜狗的搜索结果页面，如果正常的话返回网页源码，如果触发反爬虫机制，那么我们就选择更换代理，当然我们可以加一个最大重复次数的验证，避免死循环。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_index</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    items <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.news-box .news-list li .txt-box h3 a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">yield</span> item<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span></code></pre><p>我们解析这个网页，然后提取出对应的href，超链接然后通过生成器yield将结果返回上层，再之后就是普通的挨个访问，然后提取信息，这里不在赘述。<br>有一个问题就是pyquery好像不能把时间那个标签完整的提取出来，大佬们可以采取正则表达式尝试一下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml<span class="token punctuation">.</span>etree <span class="token keyword">import</span> XMLSyntaxError</code></pre><p>在解析过程中，我们发现程序报错显示XMLSyntaxError，这是一个不常见的解析错误，我们将其引入即可，数据库操作还是老样子也不在多提，代理池的事情下篇文章再讲~~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这个爬虫用到了代理池，Pyquery解析库，requests请求库-and-万年不变的MongoDB数据库&quot;&gt;&lt;a href=&quot;#这个爬虫用到了代理池，Pyquery解析库，requests请求库-and-万年不变的MongoDB数据库&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装Gogs的一些坑和心得</title>
    <link href="http://yoursite.com/2018/08/30/hello-world/"/>
    <id>http://yoursite.com/2018/08/30/hello-world/</id>
    <published>2018-08-30T03:08:09.000Z</published>
    <updated>2018-10-14T14:09:48.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服（觉得自己代码不够漂亮）废话不多说进入正题。"><a href="#Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服（觉得自己代码不够漂亮）废话不多说进入正题。" class="headerlink" title="Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服（觉得自己代码不够漂亮）废话不多说进入正题。"></a>Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服（觉得自己代码不够漂亮）废话不多说进入正题。</h3><p>首先我们要安装数据库：所有的版本都支持 MySQL、PostgreSQL、MSSQL 和 TiDB（使用 MySQL 协议）作为数据库，并且均使用构建标签（build tags）cert 进行构建。需要注意的是，不同的版本的支持状态有所不同，请根据实际的 Gogs 提示进行操作。。我选择的是mysql</p><pre class=" language-bash"><code class="language-bash">代码很简单——sudo <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server根据提示一步步安装，完成后可以终端输入 mysql --version  成功的话会看到mysql的版本号第二步安装git--sudo <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> 同样根据提示进行安装或者 <span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> <span class="token function">git</span> （默认所有需要输入操作输入yes）<span class="token function">git</span> --version查看版本号观察是否安装成功上面都成功之后开始创建一个新用户git （是系统用户和git软件并无联系）我们将gogs安装在git用户中<span class="token function">sudo</span> adduser <span class="token function">git</span>  按照提示设置密码等切换git用户  <span class="token function">sudo</span> <span class="token function">su</span> - <span class="token function">git</span>先安装go语言，linux可直接用sudo <span class="token function">apt-get</span> <span class="token function">install</span> golang <span class="token punctuation">(</span>直接打go是没有的会显示找不到软件包，go又名golang,镜像源中go的包为golang<span class="token punctuation">)</span>   附注：如出现找不到软件包可以尝试更新镜像源，国内较好的镜像源有阿里云等，我们可以通过software-properties-gtk 然后选择合适的镜像源也可以通过编辑源文件——vim /etc/apt/sources.list 亦可以sudo gedit /etc/apt/source.list 然后把自己网上找的镜像源代码复制进去 比如这个网站里的一个源http://blog.sina.com.cn/s/blog_6bc5571a0101077t.html还可以通过wget 命令直接从网上下载压缩包例如 <span class="token function">su</span> - <span class="token function">git</span><span class="token function">wget</span> https://dl.google.com/go/go1.9.2.linux-amd64.tar.gz网址可以自己在网页上寻找最新版的压缩包解压并删除该安装包（建议先不删避免出现错误之后重新下载）<span class="token function">tar</span> -xf go1.9.2.linux-amd64.tar.gz<span class="token function">rm</span> -f go1.9.2.linux-amd64.tar.gztar.gz为二进制压缩文件解压后相当于安装在了该计算机上我们需要设置环境变量设置 GOROOT 和 GOPATH 目录到系统环境，这样，我们就可以在 <span class="token function">git</span> 用户下执行 go 命令。执行下方的命令<span class="token function">cd</span> ~/<span class="token keyword">echo</span> <span class="token string">'export GOROOT=<span class="token variable">$HOME</span>/local/go'</span> <span class="token operator">>></span> <span class="token variable">$HOME</span>/.bashrc<span class="token keyword">echo</span> <span class="token string">'export GOPATH=<span class="token variable">$HOME</span>/go'</span> <span class="token operator">>></span> <span class="token variable">$HOME</span>/.bashrc<span class="token keyword">echo</span> <span class="token string">'export PATH=<span class="token variable">$PATH</span>:<span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin'</span> <span class="token operator">>></span> <span class="token variable">$HOME</span>/.bashrc然后运行source ~/.bashrc 重载Bash 一定确保自己不会写错！认真认真认真！！！！！重要的事情说三遍</code></pre><p>大体上完成了我们可以进入正题了！！！！</p><p>使用git安装gogs—–即使用git用户用go命令下载Gogs</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">su</span> - <span class="token function">git</span>$ go get -u github.com/gogits/gogs</code></pre><p>此命令将在 GOPATH/src 目录下载 Gogs 的所有源代码。</p><p>个人觉得这个非常慢，刚开始弄甚至以为电脑坏了。。</p><p>切换至 $GOPATH/src/github.com/gogits/gogs 目录，并且使用下列命令搭建 Gogs。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/gogits/gogsgo build</code></pre><p>官网上还可以构造分支什么的可以尝试一下。。。不做论述</p><p>既然这个比较慢那么当然有快捷办法——参考安装go的方法我们可以运行wget</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -c https://dl.gogs.io/0.11.19/linux_amd64.tar.gz</code></pre><p>等待下载完成tar zxvf 压缩包名即可将二进制的文件安装进行下列操作</p><p>两种方法完成后都可以进入gogs文件夹运行  ./gogs web</p><p>看到这里恭喜你，基本完成了。我们可以crtl c让进程停下。。因为我们的数据库还没有配置</p><p>mysql -u root(这是用户名） -p  （因为我们要创建用户所以要用最高权限的用户）</p><p>输入密码进入然后然后数据库的基本操作百度吧。。（数据库名和数据库用户名不是一个概念）</p><p>exit;  退出数据库</p><p>再次进入gogs文件夹  ./gogs web</p><p>浏览器输入对应网址。。。。。不知道本机ip?那么 ipconfig -a 即可看到自己的ip</p><p>我的是：<a href="http://192.168.176.129:3000/" target="_blank" rel="noopener">http://192.168.176.129:3000/</a> 然后设置对应的配置</p><p>如果还想要其他的操作那么去这里<a href="https://linux.cn/article-9391-1.html" target="_blank" rel="noopener">https://linux.cn/article-9391-1.html</a></p><p>以及一些解压文件<a href="https://blog.csdn.net/zhongnanjun_3/article/details/6312678" target="_blank" rel="noopener">https://blog.csdn.net/zhongnanjun_3/article/details/6312678</a></p><p>还有vim编译器的读写操作<a href="https://my.oschina.net/liujinofhome/blog/36648" target="_blank" rel="noopener">https://my.oschina.net/liujinofhome/blog/36648</a></p><p>同时因为电脑的不同的不同可能还会有其他各种奇葩错误，且行且珍惜</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服（觉得自己代码不够漂亮）废话不多说进入正题。&quot;&gt;&lt;a href=&quot;#Gogs作为用go语言写的轻量级的git仓库很适合大家部署在自己的服务器上，建立私人仓库更是很舒服
      
    
    </summary>
    
      <category term="ubuntu" scheme="http://yoursite.com/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="gogs" scheme="http://yoursite.com/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>饿了么爬虫尝试</title>
    <link href="http://yoursite.com/2018/08/29/elm/"/>
    <id>http://yoursite.com/2018/08/29/elm/</id>
    <published>2018-08-29T15:02:00.000Z</published>
    <updated>2018-10-14T14:04:45.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="突发奇想，想爬取外卖商家的信息（虽然吃了一暑假外卖，要吐的感觉）。用到了分析Ajax请求，储存库依旧是MongoDB，还用了一下代理池（因为第一次爬取出现了429状态码，限制爬取速度，但是配置完代理池之后这个错误竟然消失了）"><a href="#突发奇想，想爬取外卖商家的信息（虽然吃了一暑假外卖，要吐的感觉）。用到了分析Ajax请求，储存库依旧是MongoDB，还用了一下代理池（因为第一次爬取出现了429状态码，限制爬取速度，但是配置完代理池之后这个错误竟然消失了）" class="headerlink" title="突发奇想，想爬取外卖商家的信息（虽然吃了一暑假外卖，要吐的感觉）。用到了分析Ajax请求，储存库依旧是MongoDB，还用了一下代理池（因为第一次爬取出现了429状态码，限制爬取速度，但是配置完代理池之后这个错误竟然消失了）"></a>突发奇想，想爬取外卖商家的信息（虽然吃了一暑假外卖，要吐的感觉）。用到了分析Ajax请求，储存库依旧是MongoDB，还用了一下代理池（因为第一次爬取出现了429状态码，限制爬取速度，但是配置完代理池之后这个错误竟然消失了）</h3><pre class=" language-python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"cookie"</span><span class="token punctuation">:</span> <span class="token string">"ubt_ssid=rp2q5djs0u6ewmuztcx8mgd2mrkv0vgy_2018-08-29; _utrace=04d8824d7caede2317d2342af2517ebf_2018-08-29; SL_GWPT_Show_Hide_tmp=1; SL_wptGlobTipTmp=1; track_id=1535537453|22aa0399855feb682fdaec9615fcab851e46acb633c7ede4a1|28e66234a33c368946d7476ac4a530f8; USERID=457663306; SID=8qvMlmIw0lzs0oBSvJXJoHiG0ohT7yC77chA"</span><span class="token punctuation">,</span>    <span class="token string">"referer"</span><span class="token punctuation">:</span> <span class="token string">"https://www.ele.me/place/wtswdqsgbhhq?latitude=32.11645&amp;longitude=118.933531"</span><span class="token punctuation">,</span>    <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"x-shard"</span><span class="token punctuation">:</span> <span class="token string">"loc=118.933531,32.1164"</span><span class="token punctuation">}</span></code></pre><p>因为需要登陆后才能看到商家信息，所以我们在heads中加入cookies，User-agent参数则是屏蔽爬虫的标识让网站认为我们是正常的浏览。<br>通过观察我们发现网站采取Ajax,和微信与头条一样，下拉能看到更多的内容，因此我们直接爬去这部分字符串即可</p><pre class=" language-python"><code class="language-python">BASE_URL <span class="token operator">=</span> <span class="token string">'https://www.ele.me/restapi/shopping/restaurants?'</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"extras[]"</span><span class="token punctuation">:</span> <span class="token string">"activities"</span><span class="token punctuation">,</span>        <span class="token string">"geohash"</span><span class="token punctuation">:</span> <span class="token string">"wtswdqsgbhhq"</span><span class="token punctuation">,</span>        <span class="token string">"latitude"</span><span class="token punctuation">:</span> <span class="token number">32.11645</span><span class="token punctuation">,</span>        <span class="token string">"limit"</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        <span class="token string">"longitude"</span><span class="token punctuation">:</span> <span class="token number">118.933531</span><span class="token punctuation">,</span>        <span class="token string">"offset"</span><span class="token punctuation">:</span> offset<span class="token punctuation">,</span>        <span class="token string">"terminal"</span><span class="token punctuation">:</span> <span class="token string">"web"</span>    <span class="token punctuation">}</span>url <span class="token operator">=</span> BASE_URL <span class="token operator">+</span> urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span></code></pre><p>通过urlencode将文本拼接为正常的url 参数我们可以直接打印出来然后访问这个url 发现返回的是一堆字符串，当然我们要的信息就在里面</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>timeout 为超时处理，如果超过指定时间未响应则报错<br>得到字符串列表之后通过查找则可以找到相关的信息</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">for</span> item <span class="token keyword">in</span> json<span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token punctuation">{</span>            <span class="token string">"shopname"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"adress"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"opening_hours"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'opening_hours'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"flavors"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'flavors'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"piecewise_agent_fee"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'piecewise_agent_fee'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"order_lead_time"</span> <span class="token punctuation">:</span> item<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'order_lead_time'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span></code></pre><p> 分别为店家名称，地址，开放时间，特色，配送费，平均配送时间。<br> 之后储存全套服务不在啰嗦。<br> 还剩下刚开始说的代理池，虽然没太大用，但为了避免时不时的429状态码，还是加上为妙。</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>PROXY_POOL_URL<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text        <span class="token keyword">return</span> None    <span class="token keyword">except</span> ConnectionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre><p> 运用代理则为</p><pre class=" language-python"><code class="language-python">         <span class="token keyword">if</span> PROXY<span class="token punctuation">:</span>            proxies <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"https"</span> <span class="token punctuation">:</span> <span class="token string">"https://"</span> <span class="token operator">+</span> PROXY            <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Using proxy"</span><span class="token punctuation">,</span>PROXY<span class="token punctuation">)</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">,</span>allow_redirects <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>proxies <span class="token operator">=</span> proxies<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p> proxies 就是requests包中的代理参数，allow_redirects是禁止重定向，requests函数遇到错误会自动帮我们重定向，因为我们要用代理所以禁止重定向。<br> 基本这个爬虫就完成了，说说它的缺点：这个界面没有详细的餐点目录仅有一些店家的信息，还需多多努力，且行且珍惜</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;突发奇想，想爬取外卖商家的信息（虽然吃了一暑假外卖，要吐的感觉）。用到了分析Ajax请求，储存库依旧是MongoDB，还用了一下代理池（因为第一次爬取出现了429状态码，限制爬取速度，但是配置完代理池之后这个错误竟然消失了）&quot;&gt;&lt;a href=&quot;#突发奇想，想爬取
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>简单的爬虫</title>
    <link href="http://yoursite.com/2018/08/29/pyquery/"/>
    <id>http://yoursite.com/2018/08/29/pyquery/</id>
    <published>2018-08-29T08:40:01.000Z</published>
    <updated>2018-10-14T14:02:07.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求"><a href="#简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求" class="headerlink" title="简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求"></a>简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求</h3><p>这里以一个简单的实例讲解一下如何提取网页信息并储存在MongoDB数据库<br>爬取的网站是<a href="https://isujin.com" target="_blank" rel="noopener">https://isujin.com</a><br>主函数很简单一层一层的传递</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> get_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        html <span class="token operator">=</span> get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> html<span class="token punctuation">:</span>            data <span class="token operator">=</span> parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            <span class="token keyword">if</span> data<span class="token punctuation">:</span>                save_as_text<span class="token punctuation">(</span>html<span class="token punctuation">)</span>                save_to_mongo<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果没安装mongo可以取消此项</span>                save_picture<span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>首先是获取所有的链接</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    URL <span class="token operator">=</span> <span class="token string">'https://isujin.com/page/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            html <span class="token operator">=</span> response<span class="token punctuation">.</span>text            doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            urls <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'#primary .post > a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                url <span class="token operator">=</span> url<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> url            <span class="token keyword">return</span> doc<span class="token punctuation">(</span><span class="token string">'#post0 > h2 > a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ConnectionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre><p> 我们提取出所有的网页的url 如果返回值的状态码为200证明为正确响应，通过pq(html)将HTML网页转化为pyquery的格式，pyquery依据CSS选择器提取信息，#开头根据标签的id属性提取；.开头则依据class属性提取 具体CSS选择器的内容可以去<a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p><pre class=" language-python"><code class="language-python">    urls <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'#primary .post > a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>items() 在pyquery中是一个生成器把所有的选中的许多<a href="....">生成一个列表，然后我们用for循环进行遍历每个标签并提取出链接 通过yield迭代器将链接返回到外层</a></p><p>返回html文档的函数不在赘述，很简单。接下来是解析html文档提取我们要的信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    title <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    time <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'div.stuff > span:nth-child(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    readcount <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'div.stuff > span:nth-child(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'title'</span> <span class="token punctuation">:</span> title<span class="token punctuation">,</span>        <span class="token string">'time'</span> <span class="token punctuation">:</span> time<span class="token punctuation">,</span>        <span class="token string">'readcount'</span> <span class="token punctuation">:</span> readcount<span class="token punctuation">,</span>        <span class="token string">'content'</span> <span class="token punctuation">:</span> content    <span class="token punctuation">}</span></code></pre><p>和提取herf一样 通过CSS 选择器获取我们索要的节点然后text() 即可提取所要的文本信息。之后以字典的形式返回数据到外层函数（因为数据库存储是以字典型）</p><pre class=" language-python"><code class="language-python">client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>MONGO_URl<span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span>MONGO_DB<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">save_to_mongo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> db<span class="token punctuation">[</span>MONGO_TABLE<span class="token punctuation">]</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'title'</span> <span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'$set'</span> <span class="token punctuation">:</span> data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Saved to Mongo"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Saved to Mongo Failed"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>mongodb数据库的操作也极为简单，设定好MONGO_URL = ‘localhost’ MONGO_DB = ‘数据库名称’ MONGO_TABLE = ‘表名’<br>我们采取更新的方式储存，如果信息已经出现我们选择更新，以title为关键字，如果title对应的数据已经出现那么就更新它更新的内容为{‘$set’ : data}，也就是data的全部数据，若最后一个参数为false 那么如果只执行更新操作，原来不存在的数据不会插入. MONGO 学习网站可以参考这个很简单<a href="http://www.runoob.com/mongodb/mongodb-update.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-update.html</a></p><p>其他储存照片也是一样的不在赘述贴一下代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_picture</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    images <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'#jg > a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        image <span class="token operator">=</span> image<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>image<span class="token punctuation">)</span>            <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                file_path <span class="token operator">=</span> <span class="token string">'{0}/{1}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'.title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>md5<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Downloading"</span><span class="token punctuation">,</span>file_path<span class="token punctuation">)</span>                    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Already Downloaded"</span><span class="token punctuation">,</span>file_path<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Download Error"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>args<span class="token punctuation">)</span></code></pre><p>需要注意的是储存文本时f.write()中的内容必须为字符串</p><p>一个简易爬虫就写好了，还差最后一个多进程问题</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>main<span class="token punctuation">,</span>group<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>pool = Pool() 没有指定的话会根据系统自动分配，通过map()函数,map(main,group)，第一个参数是方法，第二个是数组列表，简单的来说就是把main方法依次执行<br>close() 关闭pool，使其不在接受新的任务。<br>join() 主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用<br>具体请看大神的作品 <a href="https://cuiqingcai.com/3335" target="_blank" rel="noopener">https://cuiqingcai.com/3335</a></p><p>[链接]：<a href="https://pan.baidu.com/s/1lKcM4PgJaV-gKMuioQwaWQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1lKcM4PgJaV-gKMuioQwaWQ</a> 密码：gczk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求&quot;&gt;&lt;a href=&quot;#简单的说一下用到的知识，多进程，pyquery解析，pymongo链接数据库，requests发送请求&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python链接数据库报错</title>
    <link href="http://yoursite.com/2018/08/28/first/"/>
    <id>http://yoursite.com/2018/08/28/first/</id>
    <published>2018-08-28T10:01:07.000Z</published>
    <updated>2018-10-18T10:45:00.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在pycharm中连接数据库报错"><a href="#在pycharm中连接数据库报错" class="headerlink" title="在pycharm中连接数据库报错"></a>在pycharm中连接数据库报错</h2><pre class=" language-python"><code class="language-python">$   <span class="token keyword">import</span> hashlib<span class="token punctuation">,</span>os<span class="token punctuation">,</span>requests<span class="token punctuation">,</span>ast$   <span class="token keyword">import</span> pymysql$   <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup$   <span class="token comment" spellcheck="true">#数据库链接</span>$   conn<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>passwd<span class="token operator">=</span><span class="token string">"1820401746yuan.A"</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">"pm"</span><span class="token punctuation">)</span>$   cursor<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#创建cursor对象</span>$   host 主机名也可用<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">.</span>代替（本地服务器）port端口（附查看方式，登陆mysql输入下列代码） show <span class="token keyword">global</span> variables like <span class="token string">'port'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> Value <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> port          <span class="token operator">|</span> <span class="token number">3306</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row <span class="token keyword">in</span> set<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.16</span> sec<span class="token punctuation">)</span>user 用户名默认为root——权限最大的用户ERROR <span class="token number">1045</span> <span class="token punctuation">(</span><span class="token number">28000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password<span class="token punctuation">:</span> NO<span class="token punctuation">)</span></code></pre><p>网上有很多的办法，但都不能解决我的问题。</p><p>比如赋予数据库权限，以及创建新用户等等。。。</p><p>然后在我的努力寻找下成功了</p><h4 id="最简单的方法是更换了root密码的认证方式解决的，新版mysql使用的caching-sha2-password，换成mysql-native-password我就可以连上了。"><a href="#最简单的方法是更换了root密码的认证方式解决的，新版mysql使用的caching-sha2-password，换成mysql-native-password我就可以连上了。" class="headerlink" title="最简单的方法是更换了root密码的认证方式解决的，新版mysql使用的caching_sha2_password，换成mysql_native_password我就可以连上了。"></a>最简单的方法是更换了root密码的认证方式解决的，新版mysql使用的caching_sha2_password，换成mysql_native_password我就可以连上了。</h4><pre class=" language-python"><code class="language-python">然后输入ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'password'</span><span class="token punctuation">;</span> password即你的密码）</code></pre><p>原博客地址 <a href="https://blog.csdn.net/dongweionly/article/details/80273095" target="_blank" rel="noopener">https://blog.csdn.net/dongweionly/article/details/80273095</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在pycharm中连接数据库报错&quot;&gt;&lt;a href=&quot;#在pycharm中连接数据库报错&quot; class=&quot;headerlink&quot; title=&quot;在pycharm中连接数据库报错&quot;&gt;&lt;/a&gt;在pycharm中连接数据库报错&lt;/h2&gt;&lt;pre class=&quot; lang
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
</feed>
